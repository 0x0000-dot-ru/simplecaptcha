---
title:      Extending SimpleCaptcha
created_at: 2009-02-10 14:05:15.956302 -06:00
filter:
  - erb
  - textile
---
p(title). <%= h(@page.title) %>

While the default implementation of SimpleCaptcha will hopefully provide all your needs straight out-of-the-box, you may find it useful to customize your CAPTCHA. SimpleCaptcha provides for the ability to specify how answers are generated (five Latin characters, from a list of words, etc.), how the answer is rendered on the image, how backgrounds are generated, and so forth. This can be accomplished either by using the Builder (described shortly) or via Spring.

h2. The Builder

The preferred means of generating CAPTCHAs is using <code>Captcha.Builder</code>. 

<% uv :lang => "java", :theme => 'spacecadet', :line_numbers => true do -%>
    Captcha captcha = new Captcha.Builder(200, 50)
       .addText()
       .build(); // Required! Always!
<% end -%>

This will generate an image that looks something like this:

!i/simplest.png!

Based on this, consider the following: first, this (obviously) created a 200x50 CAPTCHA image. Second, the call to addText() added 5 random characters to the image, the default behavior. (This behavior can be customized; we will talk about how to do that shortly.) Finally note the call to <code>build()</code>. Assuming you'd like for your CAPTCHA to appear in a usable state, calling this method last is _required_. The reason for this is that it is responsible for actually building our CAPTCHA based upon what we have told the builder to do.

So, what else can we do? Well...

<% uv :lang => "java", :theme => 'spacecadet', :line_numbers => true do -%>
    Captcha captcha = new Captcha.Builder(200, 50)
        .addText()
        .addBackground()
        .addNoise()
        .gimp()
        .addBorder()
        .build(); // Required. 
<% end -%>

This would yield something like:

!i/defaults_all.png!

Each of the builder methods has no-args version, and most have one (or more) overloaded versions which provide the ability customize CAPTCHA generation. For example, if instead of generating five Latin characters we needed to generate six Chinese characters we could do the following:

<% uv :lang => "java", :theme => 'spacecadet', :line_numbers => true do -%>
Captcha captcha = new Captcha.Builder(230, 75)
    .addText(new ChineseTextProducer(6))
    .build();
<% end -%>

The following table describes these methods:

|_.Method|_.Arg Type(s)|_.Default|_.What it does|
|addText|"TextProducer":/javadocs/nl/captcha/text/producer/TextProducer.html|DefaultTextProducer|Customize the way answers are generated|
|addText|"WordRenderer":/javadocs/nl/captcha/text/renderer/WordRenderer.html|DefaultWordRenderer|Customize the way answers are displayed (font, color, etc.)|
|addText|"TextProducer":/javadocs/nl/captcha/text/producer/TextProducer.html, "WordRenderer":/javadocs/nl/captcha/text/renderer/WordRenderer.html| DefaultTextProducer, DefaultWordRenderer|&nbsp;|
|addBackground|"BackgroundProducer":/javadocs/nl/captcha/backgrounds/BackgroundProducer.html|TransparentBackgroundProducer|Add a background using the given producer|
|addNoise|"NoiseProducer":/javadocs/nl/captcha/noise/NoiseProducer.html|CurvedLineNoiseProducer|Add some noise on top of the image|
|gimp|"GimpyRenderer":/javadocs/nl/captcha/gimpy/GimpyRenderer.html|RippleGimpyRenderer|Gimp the image. Make it weird. Twist, twirl, whatever.|
|addBorder|None|None|Adds a border|
|build|None|None|Builds the @Captcha@. Required. Must be called last.|

Note also that the gimp(), addNoise(), and addText() methods can be called multiple times. For example:

<% uv :lang => "groovy", :theme => 'spacecadet', :line_numbers => true do -%>
    def multi = {
        def captcha = new Captcha.Builder(WIDTH, HEIGHT)
            .addBackground(new GradiatedBackgroundProducer())
            .addText(new ChineseTextProducer(2))
            .addText(new DefaultTextProducer(2))
            .addText(new ChineseTextProducer(2))
            .gimp()
            .gimp(new DropShadowGimpyRenderer())
            .addNoise()
            .addNoise()
            .addNoise()
            .addBorder()
            .build()
        CaptchaServletUtil.writeImage(response, captcha.image)
    }
<% end -%>

This generated the following:

<div>
!i/chinese_multi.png!
</div>

It is apparent by this that SimpleCaptcha is easy to use, and generates CAPTCHAs that meet specific requirements for whatever your application.
